//
//  MovieListPresenter.swift
//  MoviePlanet
//
//  Created by eyup cimen on 23.09.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListPresentationLogic {
    func presentFetchedMovies(response: ListMovies.FetchMovies.Response)
    func presentSliderMovies(response: ListMovies.FetchSlidersMovies.Response)
    func presentSearchMovies(response: ListMovies.FetchSearchMovies.Response)
}

class MovieListPresenter: MovieListPresentationLogic {
    weak var viewController: MovieListDisplayLogic?
    func presentFetchedMovies(response: ListMovies.FetchMovies.Response) {
        var displayedMovies: [ListMovies.FetchMovies.ViewModel.DisplayedMovie] = []
        for movie in response.movies {
            guard let id = movie.Id, let title = movie.Title, let overview = movie.Overview, let vote = movie.VoteAverage, let imdblink = movie.ImdbLink, let backdrop = movie.BackdropPath, let posterlink = movie.PosterPath else {return}
            let displayedMovie = ListMovies.FetchMovies.ViewModel.DisplayedMovie(id: id,
                                                                                 title: title,
                                                                                 releaseDate: movie.ReleaseDate,
                                                                                 overview: overview,
                                                                                 voteAverage: vote,
                                                                                 imdbLink: imdblink,
                                                                                 backdropPath: backdrop,
                                                                                 posterPath: posterlink)
            displayedMovies.append(displayedMovie)
        }
        let viewModel = ListMovies.FetchMovies.ViewModel(displayedMovie: displayedMovies)
        viewController?.displayMovies(viewModel: viewModel)
    }
    
    func presentSliderMovies(response: ListMovies.FetchSlidersMovies.Response) {
        var pathArray : [String] = []
        var titleArray : [String] = []
        var displayedMovies: [ListMovies.FetchSlidersMovies.ViewModel.DisplayedMovie] = []
        for movie in response.movies {
            guard let id = movie.Id, let title = movie.Title, let overview = movie.Overview, let vote = movie.VoteAverage, let imdblink = movie.ImdbLink, let backdrop = movie.BackdropPath, let posterlink = movie.PosterPath else {return}
            let displayedMovie = ListMovies.FetchSlidersMovies.ViewModel.DisplayedMovie(id: id,
                                                                                 title: title,
                                                                                 releaseDate: movie.ReleaseDate,
                                                                                 overview: overview,
                                                                                 voteAverage: vote,
                                                                                 imdbLink: imdblink,
                                                                                 backdropPath: backdrop,
                                                                                 posterPath: posterlink)
            displayedMovies.append(displayedMovie)
            titleArray.append(movie.Title ?? "")
            pathArray.append(movie.BackdropPath ?? "")
        }
        let viewModel = ListMovies.FetchSlidersMovies.ViewModel(displayedMovie: displayedMovies, pathArray: pathArray, titleArray: titleArray)
        viewController?.displaySliderMovies(viewModel: viewModel)
    }
    
    func presentSearchMovies(response: ListMovies.FetchSearchMovies.Response) {
        var displayedMovies: [ListMovies.FetchSearchMovies.ViewModel.DisplayedMovie] = []
        for movie in response.movies {
            guard let id = movie.Id, let title = movie.Title, let overview = movie.Overview, let vote = movie.VoteAverage, let imdblink = movie.ImdbLink, let backdrop = movie.BackdropPath, let posterlink = movie.PosterPath else {return}
            let displayedMovie = ListMovies.FetchSearchMovies.ViewModel.DisplayedMovie(id: id,
                                                                                 title: title,
                                                                                 releaseDate: movie.ReleaseDate,
                                                                                 overview: overview,
                                                                                 voteAverage: vote,
                                                                                 imdbLink: imdblink,
                                                                                 backdropPath: backdrop,
                                                                                 posterPath: posterlink)
            displayedMovies.append(displayedMovie)
        }
        let viewModel = ListMovies.FetchSearchMovies.ViewModel(displayedMovie: displayedMovies)
        viewController?.displaySearchMovies(viewModel: viewModel)
    }
}
