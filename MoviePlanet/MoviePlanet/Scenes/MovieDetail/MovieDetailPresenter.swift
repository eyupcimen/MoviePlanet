//
//  MovieDetailPresenter.swift
//  MoviePlanet
//
//  Created by eyup cimen on 25.09.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailPresentationLogic {
    func presentMovieDetail(response: MovieDetail.Detail.Response)
    func presentSimilarMovies(response: MovieDetail.SimilarMovies.Response)
}

class MovieDetailPresenter: MovieDetailPresentationLogic {
    weak var viewController: MovieDetailDisplayLogic?
    func presentMovieDetail(response: MovieDetail.Detail.Response) {
        let movie = response.movie
        guard let id = movie.Id, let title = movie.Title, let overview = movie.Overview, let vote = movie.VoteAverage, let backdrop = movie.BackdropPath, let posterlink = movie.PosterPath else {return}
        let displayedMovie = MovieDetail.Detail.ViewModel.DisplayedMovie(id: id,
                                                                         title: title,
                                                                         releaseDate: movie.ReleaseDate,
                                                                         overview: overview,
                                                                         voteAverage: vote,
                                                                         backdropPath: backdrop,
                                                                         posterPath: posterlink)
        
        let viewModel = MovieDetail.Detail.ViewModel(displayedMovie: displayedMovie)
        viewController?.displayMovieDetail(viewModel: viewModel)
    }
    
    func presentSimilarMovies(response: MovieDetail.SimilarMovies.Response) {
        var displayedMovies: [MovieDetail.SimilarMovies.ViewModel.DisplayedMovie] = []
        for movie in response.movies {
            guard let id = movie.Id, let title = movie.Title, let overview = movie.Overview, let vote = movie.VoteAverage, let imdblink = movie.ImdbLink, let backdrop = movie.BackdropPath, let posterlink = movie.PosterPath else {return}
            let displayedMovie = MovieDetail.SimilarMovies.ViewModel.DisplayedMovie(id: id,
                                                                                 title: title,
                                                                                 releaseDate: movie.ReleaseDate,
                                                                                 overview: overview,
                                                                                 voteAverage: vote,
                                                                                 imdbLink: imdblink,
                                                                                 backdropPath: backdrop,
                                                                                 posterPath: posterlink)
            displayedMovies.append(displayedMovie)
        }
        let viewModel = MovieDetail.SimilarMovies.ViewModel(displayedMovie: displayedMovies)
        viewController?.displaySimilarMovies(viewModel: viewModel)
    }
}
