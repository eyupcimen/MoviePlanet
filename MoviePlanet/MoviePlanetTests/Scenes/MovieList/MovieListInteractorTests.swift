//
//  MovieListInteractorTests.swift
//  MoviePlanet
//
//  Created by eyup cimen on 25.09.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MoviePlanet
import XCTest

class MovieListInteractorTests: XCTestCase {
    var sut: MovieListInteractor!
    override func setUp() {
        super.setUp()
        setupMovieListInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    func setupMovieListInteractor() {
        sut = MovieListInteractor()
    }
    
    class MovieListPresentationLogicSpy: MovieListPresentationLogic {
        
        var presentUpcomingMoviesCalled = false
        func presentFetchedMovies(response: ListMovies.FetchMovies.Response) {
            presentUpcomingMoviesCalled = true
        }
        
        func presentSliderMovies(response: ListMovies.FetchSlidersMovies.Response) {
            
        }
        
        func presentSearchMovies(response: ListMovies.FetchSearchMovies.Response) {
            
        }
    }
    
    class MoviesWorkerSpy: MovieWorker {
        
        var fetchUpcomingMoviesCalled = false
        
        override func getUpcomingList(_ completion: @escaping ([Movie]) -> ()) {
            fetchUpcomingMoviesCalled = true
            completion([Seeds.Movies.movie1, Seeds.Movies.movie2])
        }

    }
     
//    
//    func testDoSomething() {
//        // Given
//        let spy = MovieListPresentationLogicSpy()
//        sut.presenter = spy
//        let request = ListMovies.FetchMovies.Request()
//        // When
//        sut.fetchMovies(request: request)
//        // Then
//        XCTAssertTrue(spy.presentUpcomingMoviesCalled, "fetchMovies(request:) should ask the presenter to format the result")
//    }
    
    func testFetchOrdersShouldAskMoviesWorkerToFetchMoviesAndPresenterToFormatResult() {
        // Given
        let listMoviesPresentationLogicSpy = MovieListPresentationLogicSpy()
        sut.presenter = listMoviesPresentationLogicSpy
        let moviesWorkerSpy = MoviesWorkerSpy(moviesStore: MoviesMemStore())
        sut.moviesWorker = moviesWorkerSpy
        // When
        let request = ListMovies.FetchMovies.Request()
        sut.fetchMovies(request: request)
        
        // Then
        XCTAssert(moviesWorkerSpy.fetchUpcomingMoviesCalled, "FetchMovies() should ask MoviesWorker to fetch movies")
        XCTAssert(listMoviesPresentationLogicSpy.presentUpcomingMoviesCalled, "FetchMovies() should ask presenter to format movies result")
    }
}
