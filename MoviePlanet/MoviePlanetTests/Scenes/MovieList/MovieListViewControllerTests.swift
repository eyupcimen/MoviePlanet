//
//  MovieListViewControllerTests.swift
//  MoviePlanet
//
//  Created by eyup cimen on 25.09.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MoviePlanet
import XCTest

class MovieListViewControllerTests: XCTestCase {
    
    var sut: MovieListViewController!
    var window: UIWindow!
    
    override func setUp() {
        super.setUp()
        DispatchQueue.main.async {
            self.window = UIWindow()
            self.setupMovieListViewController()
        }
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    func setupMovieListViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "MovieListViewController") as? MovieListViewController
    }
    
    func loadView() {
        DispatchQueue.main.async {
            self.window.addSubview(self.sut.view)
            RunLoop.current.run(until: Date())
        }
    }
    
    class MovieListBusinessLogicSpy: MovieListBusinessLogic {
        
        var upcomingMovies : [Movie]?
        var fetchUpcomingMoviesCalled = false
        var sliderMoviesCalled = false
        
        func fetchMovies(request: ListMovies.FetchMovies.Request) {
            fetchUpcomingMoviesCalled = true
        }
        
        func fetchSliderMovies(request: ListMovies.FetchSlidersMovies.Request) {
            sliderMoviesCalled = true
        }
        
        func fetchSearchMovies(keyword: String, request: ListMovies.FetchSearchMovies.Request) {}
        
    }
    
    class TableViewSpy: UITableView {
        
        var reloadDataCalled = false
        
        override func reloadData() {
            reloadDataCalled = true
        }
    }
    
    func testShouldDoSomethingWhenViewIsLoaded() {
        DispatchQueue.main.async {
            // Given
            let spy = MovieListBusinessLogicSpy()
            self.sut.interactor = spy
            // When
            self.loadView()
            // Then
            XCTAssertTrue(spy.fetchUpcomingMoviesCalled, "viewDidLoad() should ask the interactor to do something")
        }
    }
    
    func testShouldFetchMoviesWhenViewDidAppear() {
        DispatchQueue.main.async {
            // Given
            let listOrdersBusinessLogicSpy = MovieListBusinessLogicSpy()
            self.sut.interactor = listOrdersBusinessLogicSpy
            self.loadView()
            // When
            self.sut.viewDidAppear(true)
            // Then
            XCTAssert(listOrdersBusinessLogicSpy.fetchUpcomingMoviesCalled, "Should fetch movies right after the view appears")
        }
    }
    
    func testDisplaySomething() {
        DispatchQueue.main.async {
            // Given
            let viewModel = ListMovies.FetchMovies.ViewModel(displayedMovie: [])
            // When
            self.loadView()
            self.sut.displayMovies(viewModel: viewModel)
            // Then
            XCTAssertEqual(self.sut.upcomingDisplayedMovies.count > 0 , false , "displayMovies(viewModel:) should check upcomingDisplayedMovies.count")
        }
    }
    
    func testShouldDisplayFetchedMovies() {
        DispatchQueue.main.async {
            // Given
            let tableViewSpy = TableViewSpy()
            self.sut.mTableView = tableViewSpy
            // When
            let displayedMovies = [ListMovies.FetchMovies.ViewModel.DisplayedMovie(id: 1234, title: "test movie", releaseDate: "12.03.2020", overview: "test overview", voteAverage: 7.0, imdbLink: "test link", backdropPath: "backdroppath", posterPath: "posterpath") ]
            let viewModel = ListMovies.FetchMovies.ViewModel(displayedMovie: displayedMovies)
            self.sut.displayMovies(viewModel: viewModel)
            // Then
            XCTAssert(tableViewSpy.reloadDataCalled , "Displaying fetched movies should reload the table view")
            XCTAssert(self.sut.upcomingDisplayedMovies.count == 1, "Displaying fetched movies should reload the table view")
        }
    }
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne() {
        DispatchQueue.main.async {
            // Given
            let tableView = self.sut.mTableView
            // When
            let numberOfSections = tableView?.numberOfSections
            // Then
            XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
        }
    }
    
    func testNumberOfRowsInAnySectionShouldEqaulNumberOfOrdersToDisplay() {
        DispatchQueue.main.async {
            // Given
            guard let tableView = self.sut.mTableView else {
                XCTAssertNil(self.sut.mTableView)
                return
            }
            
            let testDisplayedMovies = [ListMovies.FetchMovies.ViewModel.DisplayedMovie(id: 1234, title: "test movie", releaseDate: "12.03.2020", overview: "test overview", voteAverage: 7.0, imdbLink: "test link", backdropPath: "backdroppath", posterPath: "posterpath")]
            self.sut.upcomingDisplayedMovies = testDisplayedMovies
            // When
            let numberOfRows = self.sut.tableView(tableView, numberOfRowsInSection: 0)
            // Then
            XCTAssertEqual(numberOfRows, testDisplayedMovies.count, "The number of table view rows should equal the number of movies to display")
        }
    }
    
    func testShouldConfigureTableViewCellToDisplayOrder() {
        DispatchQueue.main.async {
            // Given
            guard let tableView = self.sut.mTableView else {
                XCTAssertNil(self.sut.mTableView)
                return
            }
            let testDisplayedMovies = [ListMovies.FetchMovies.ViewModel.DisplayedMovie(id: 1234, title: "test movie", releaseDate: "12.03.2020", overview: "test overview", voteAverage: 7.0, imdbLink: "test link", backdropPath: "backdroppath", posterPath: "posterpath")]
            self.sut.upcomingDisplayedMovies = testDisplayedMovies
            // When
            let indexPath = IndexPath(row: 0, section: 0)
            let cell = self.sut.tableView(tableView, cellForRowAt: indexPath) as! MovieTableCell
            // Then
            XCTAssertEqual(cell.lblTitle.text, "test movie")
            XCTAssertEqual(cell.lblDetail.text, "test overview")
            XCTAssertEqual(cell.lblDate.text, "12.03.2020")
        }
    }
}
